// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/mediasoup/droid/Logger

#ifndef org_mediasoup_droid_Logger_JNI
#define org_mediasoup_droid_Logger_JNI

#include <jni.h>

#include "../include/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_mediasoup_droid_Logger[];
const char kClassPath_org_mediasoup_droid_Logger[] = "org/mediasoup/droid/Logger";

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_mediasoup_droid_Logger_00024LogLevel[];
const char kClassPath_org_mediasoup_droid_Logger_00024LogLevel[] =
    "org/mediasoup/droid/Logger$LogLevel";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_mediasoup_droid_Logger_00024LogHandlerInterface[];
const char kClassPath_org_mediasoup_droid_Logger_00024LogHandlerInterface[] =
    "org/mediasoup/droid/Logger$LogHandlerInterface";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_mediasoup_droid_Logger_clazz(nullptr);
#ifndef org_mediasoup_droid_Logger_clazz_defined
#define org_mediasoup_droid_Logger_clazz_defined
inline jclass org_mediasoup_droid_Logger_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_mediasoup_droid_Logger,
      &g_org_mediasoup_droid_Logger_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_mediasoup_droid_Logger_00024LogLevel_clazz(nullptr);
#ifndef org_mediasoup_droid_Logger_00024LogLevel_clazz_defined
#define org_mediasoup_droid_Logger_00024LogLevel_clazz_defined
inline jclass org_mediasoup_droid_Logger_00024LogLevel_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_mediasoup_droid_Logger_00024LogLevel,
      &g_org_mediasoup_droid_Logger_00024LogLevel_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_mediasoup_droid_Logger_00024LogHandlerInterface_clazz(nullptr);
#ifndef org_mediasoup_droid_Logger_00024LogHandlerInterface_clazz_defined
#define org_mediasoup_droid_Logger_00024LogHandlerInterface_clazz_defined
inline jclass org_mediasoup_droid_Logger_00024LogHandlerInterface_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_mediasoup_droid_Logger_00024LogHandlerInterface,
      &g_org_mediasoup_droid_Logger_00024LogHandlerInterface_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace mediasoupclient {

static void JNI_Logger_SetLogLevel(JNIEnv* env, jint level);

JNI_GENERATOR_EXPORT void Java_org_mediasoup_droid_Logger_nativeSetLogLevel(
    JNIEnv* env,
    jclass jcaller,
    jint level) {
  return JNI_Logger_SetLogLevel(env, level);
}

static jlong JNI_Logger_SetHandler(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    handler);

JNI_GENERATOR_EXPORT jlong Java_org_mediasoup_droid_Logger_nativeSetHandler(
    JNIEnv* env,
    jclass jcaller,
    jobject handler) {
  return JNI_Logger_SetHandler(env, base::android::JavaParamRef<jobject>(env, handler));
}

static void JNI_Logger_FreeLogHandler(JNIEnv* env, jlong handler);

JNI_GENERATOR_EXPORT void Java_org_mediasoup_droid_Logger_nativeFreeLogHandler(
    JNIEnv* env,
    jclass jcaller,
    jlong handler) {
  return JNI_Logger_FreeLogHandler(env, handler);
}


static std::atomic<jmethodID> g_org_mediasoup_droid_Logger_00024LogLevel_getLogLevel(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_LogLevel_getLogLevel(JNIEnv* env,
    JniIntWrapper level) {
  jclass clazz = org_mediasoup_droid_Logger_00024LogLevel_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_mediasoup_droid_Logger_00024LogLevel_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getLogLevel",
          "(I)Lorg/mediasoup/droid/Logger$LogLevel;",
          &g_org_mediasoup_droid_Logger_00024LogLevel_getLogLevel);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, as_jint(level));
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_mediasoup_droid_Logger_00024LogHandlerInterface_OnLog(nullptr);
static void Java_LogHandlerInterface_OnLog(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    const base::android::JavaRef<jobject>& logLevel,
    const base::android::JavaRef<jstring>& tag,
    const base::android::JavaRef<jstring>& message) {
  jclass clazz = org_mediasoup_droid_Logger_00024LogHandlerInterface_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_mediasoup_droid_Logger_00024LogHandlerInterface_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "OnLog",
          "(Lorg/mediasoup/droid/Logger$LogLevel;Ljava/lang/String;Ljava/lang/String;)V",
          &g_org_mediasoup_droid_Logger_00024LogHandlerInterface_OnLog);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, logLevel.obj(), tag.obj(), message.obj());
}

}  // namespace mediasoupclient

#endif  // org_mediasoup_droid_Logger_JNI
