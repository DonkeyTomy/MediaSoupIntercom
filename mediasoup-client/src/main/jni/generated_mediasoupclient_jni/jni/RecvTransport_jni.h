// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/mediasoup/droid/RecvTransport

#ifndef org_mediasoup_droid_RecvTransport_JNI
#define org_mediasoup_droid_RecvTransport_JNI

#include <jni.h>

#include "../include/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_mediasoup_droid_RecvTransport[];
const char kClassPath_org_mediasoup_droid_RecvTransport[] = "org/mediasoup/droid/RecvTransport";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_mediasoup_droid_RecvTransport_clazz(nullptr);
#ifndef org_mediasoup_droid_RecvTransport_clazz_defined
#define org_mediasoup_droid_RecvTransport_clazz_defined
inline jclass org_mediasoup_droid_RecvTransport_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_mediasoup_droid_RecvTransport,
      &g_org_mediasoup_droid_RecvTransport_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace mediasoupclient {

static jlong JNI_RecvTransport_GetNativeTransport(JNIEnv* env, jlong transport);

JNI_GENERATOR_EXPORT jlong Java_org_mediasoup_droid_RecvTransport_nativeGetNativeTransport(
    JNIEnv* env,
    jclass jcaller,
    jlong transport) {
  return JNI_RecvTransport_GetNativeTransport(env, transport);
}

static base::android::ScopedJavaLocalRef<jobject> JNI_RecvTransport_Consume(JNIEnv* env, jlong
    transport,
    const base::android::JavaParamRef<jobject>& listener,
    const base::android::JavaParamRef<jstring>& id,
    const base::android::JavaParamRef<jstring>& producerId,
    const base::android::JavaParamRef<jstring>& kind,
    const base::android::JavaParamRef<jstring>& rtpParameters,
    const base::android::JavaParamRef<jstring>& appData);

JNI_GENERATOR_EXPORT jobject Java_org_mediasoup_droid_RecvTransport_nativeConsume(
    JNIEnv* env,
    jclass jcaller,
    jlong transport,
    jobject listener,
    jstring id,
    jstring producerId,
    jstring kind,
    jstring rtpParameters,
    jstring appData) {
  return JNI_RecvTransport_Consume(env, transport, base::android::JavaParamRef<jobject>(env,
      listener), base::android::JavaParamRef<jstring>(env, id),
      base::android::JavaParamRef<jstring>(env, producerId),
      base::android::JavaParamRef<jstring>(env, kind), base::android::JavaParamRef<jstring>(env,
      rtpParameters), base::android::JavaParamRef<jstring>(env, appData)).Release();
}

static void JNI_RecvTransport_FreeTransport(JNIEnv* env, jlong transport);

JNI_GENERATOR_EXPORT void Java_org_mediasoup_droid_RecvTransport_nativeFreeTransport(
    JNIEnv* env,
    jclass jcaller,
    jlong transport) {
  return JNI_RecvTransport_FreeTransport(env, transport);
}


static std::atomic<jmethodID> g_org_mediasoup_droid_RecvTransport_Constructor(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_RecvTransport_Constructor(JNIEnv* env, jlong
    nativeTransport) {
  jclass clazz = org_mediasoup_droid_RecvTransport_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_mediasoup_droid_RecvTransport_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "<init>",
          "(J)V",
          &g_org_mediasoup_droid_RecvTransport_Constructor);

  jobject ret =
      env->NewObject(clazz,
          call_context.base.method_id, nativeTransport);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace mediasoupclient

#endif  // org_mediasoup_droid_RecvTransport_JNI
